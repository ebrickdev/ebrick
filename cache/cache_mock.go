// Code generated by MockGen. DO NOT EDIT.
// Source: cache/cache.go
//
// Generated by this command:
//
//	mockgen -source=cache/cache.go -destination=cache/cache_mock.go -package=cache
//

// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	reflect "reflect"
	time "time"

	store "github.com/ebrickdev/ebrick/cache/store"
	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockCache) Clear(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockCacheMockRecorder) Clear(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCache)(nil).Clear), ctx)
}

// Delete mocks base method.
func (m *MockCache) Delete(ctx context.Context, key any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCacheMockRecorder) Delete(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCache)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key)
}

// GetStats mocks base method.
func (m *MockCache) GetStats() *Stats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*Stats)
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockCacheMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockCache)(nil).GetStats))
}

// GetStore mocks base method.
func (m *MockCache) GetStore() store.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(store.Store)
	return ret0
}

// GetStore indicates an expected call of GetStore.
func (mr *MockCacheMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockCache)(nil).GetStore))
}

// GetType mocks base method.
func (m *MockCache) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockCacheMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockCache)(nil).GetType))
}

// GetWithTTL mocks base method.
func (m *MockCache) GetWithTTL(ctx context.Context, key any) (any, time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithTTL", ctx, key)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(time.Duration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWithTTL indicates an expected call of GetWithTTL.
func (mr *MockCacheMockRecorder) GetWithTTL(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithTTL", reflect.TypeOf((*MockCache)(nil).GetWithTTL), ctx, key)
}

// Invalidate mocks base method.
func (m *MockCache) Invalidate(ctx context.Context, options ...store.InvalidateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Invalidate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockCacheMockRecorder) Invalidate(ctx any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockCache)(nil).Invalidate), varargs...)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key, object any, options ...store.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, object}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, object any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, object}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), varargs...)
}

// getCacheKey mocks base method.
func (m *MockCache) getCacheKey(key any) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getCacheKey", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// getCacheKey indicates an expected call of getCacheKey.
func (mr *MockCacheMockRecorder) getCacheKey(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getCacheKey", reflect.TypeOf((*MockCache)(nil).getCacheKey), key)
}

// MockCacheKeyGenerator is a mock of CacheKeyGenerator interface.
type MockCacheKeyGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCacheKeyGeneratorMockRecorder
}

// MockCacheKeyGeneratorMockRecorder is the mock recorder for MockCacheKeyGenerator.
type MockCacheKeyGeneratorMockRecorder struct {
	mock *MockCacheKeyGenerator
}

// NewMockCacheKeyGenerator creates a new mock instance.
func NewMockCacheKeyGenerator(ctrl *gomock.Controller) *MockCacheKeyGenerator {
	mock := &MockCacheKeyGenerator{ctrl: ctrl}
	mock.recorder = &MockCacheKeyGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheKeyGenerator) EXPECT() *MockCacheKeyGeneratorMockRecorder {
	return m.recorder
}

// GetCacheKey mocks base method.
func (m *MockCacheKeyGenerator) GetCacheKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCacheKey indicates an expected call of GetCacheKey.
func (mr *MockCacheKeyGeneratorMockRecorder) GetCacheKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheKey", reflect.TypeOf((*MockCacheKeyGenerator)(nil).GetCacheKey))
}
